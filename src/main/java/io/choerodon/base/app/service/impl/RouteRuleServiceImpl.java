package io.choerodon.base.app.service.impl;import com.github.pagehelper.PageInfo;import com.github.pagehelper.page.PageMethod;import io.choerodon.base.api.vo.RouteRuleVO;import io.choerodon.base.app.service.RouteRuleService;import io.choerodon.base.infra.dto.RouteMemberRuleDTO;import io.choerodon.base.infra.dto.RouteRuleDTO;import io.choerodon.base.infra.dto.UserDTO;import io.choerodon.base.infra.mapper.RouteMemberRuleMapper;import io.choerodon.base.infra.mapper.RouteRuleMapper;import io.choerodon.base.infra.mapper.UserMapper;import io.choerodon.core.exception.CommonException;import io.choerodon.core.exception.ext.UpdateException;import io.choerodon.web.util.PageableHelper;import org.springframework.beans.BeanUtils;import org.springframework.data.domain.Pageable;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.util.ObjectUtils;import java.util.Arrays;import java.util.List;/** * RouteRuleServiceImpl * * @author pengyuhua * @date 2019/10/25 */@Servicepublic class RouteRuleServiceImpl implements RouteRuleService {    private static final String ERROR_ROUTE_RULE_INSERT_EXCEPTION = "error.route.rule.insert";    private static final String ERROR_ROUTE_RULE_UPDATE_EXCEPTION = "error.route.rule.update";    private static final String ERROR_ROUTE_MEMBER_RULE_DELETE_EXCEPTION = "error.route.member.rule.delete";    private static final String ERROR_ROUTE_MEMBER_RULE_INSERT_EXCEPTION = "error.route.member.rule.insert";    private static final String ERROR_USER_NOT_EXIST = "error.user.not.exist";    private RouteRuleMapper routeRuleMapper;    private RouteMemberRuleMapper routeMemberRuleMapper;    private UserMapper userMapper;    public RouteRuleServiceImpl(RouteRuleMapper routeRuleMapper, RouteMemberRuleMapper routeMemberRuleMapper, UserMapper userMapper) {        this.routeRuleMapper = routeRuleMapper;        this.routeMemberRuleMapper = routeMemberRuleMapper;        this.userMapper = userMapper;    }    @Override    public PageInfo<RouteRuleVO> listRouteRules(Pageable pageable, String code) {        PageInfo<RouteRuleVO> objectPageInfo = PageMethod.startPage(pageable.getPageNumber(), pageable.getPageSize(), PageableHelper.getSortSql(pageable.getSort())).doSelectPageInfo(                () -> routeRuleMapper.listRouteRules(code));        objectPageInfo.getList().forEach(v -> BeanUtils.copyProperties(queryRouteRuleDetailById(v.getId()).setUserNumber(v.getUserNumber()), v));        return objectPageInfo;    }    @Override    public RouteRuleVO queryRouteRuleDetailById(Long id) {        // 查询路由详情        RouteRuleDTO routeRuleDTO = checkRouteRuleExist(new RouteRuleDTO().setId(id));        RouteRuleVO routeRuleVO = new RouteRuleVO();        BeanUtils.copyProperties(routeRuleDTO, routeRuleVO);        // 查询用户信息        routeRuleVO.setRouteMemberRuleDTOS(routeMemberRuleMapper.select(new RouteMemberRuleDTO().setRouteRuleCode(routeRuleVO.getCode())));        // 查询用户名信息        routeRuleVO.getRouteMemberRuleDTOS().forEach(v -> {            UserDTO userDTO = userMapper.selectByPrimaryKey(v.getUserId());            if (!ObjectUtils.isEmpty(userDTO)) {                v.setLoginName(userDTO.getLoginName()).setRealName(userDTO.getRealName()).setImageUrl(userDTO.getImageUrl()).setEmail(userDTO.getEmail());            }        });        return routeRuleVO;    }    @Override    @Transactional    public RouteRuleVO createRouteRule(RouteRuleVO routeRuleVO) {        RouteRuleDTO routeRuleDTO = new RouteRuleDTO();        // 校验名称是否已经存在        if (!checkCode(routeRuleVO.getCode())) {            throw new CommonException("error.route.rule.insert.code.already.exist");        }        // 拷贝插入信息        routeRuleDTO.setCode(routeRuleVO.getCode()).setDescription(routeRuleVO.getDescription());        // 插入路由信息        if (routeRuleMapper.insert(routeRuleDTO) != 1) {            throw new CommonException(ERROR_ROUTE_RULE_INSERT_EXCEPTION);        }        // 获取添加的信息        routeRuleVO.setId(routeRuleDTO.getId()).setCode(routeRuleDTO.getCode()).setObjectVersionNumber(routeRuleDTO.getObjectVersionNumber());        // 添加路由配置用户信息        if (!ObjectUtils.isEmpty(routeRuleVO.getUserIds())) {            Arrays.stream(routeRuleVO.getUserIds()).forEach(v -> {                if (ObjectUtils.isEmpty(userMapper.selectByPrimaryKey(v))) {                    throw new CommonException(ERROR_USER_NOT_EXIST);                }                RouteMemberRuleDTO routeMemberRuleDTO = new RouteMemberRuleDTO();                routeMemberRuleDTO.setUserId(v).setRouteRuleCode(routeRuleVO.getCode());                if (routeMemberRuleMapper.insert(routeMemberRuleDTO) != 1) {                    throw new CommonException(ERROR_ROUTE_MEMBER_RULE_INSERT_EXCEPTION);                }            });        }        return routeRuleVO;    }    @Override    @Transactional    public Boolean deleteRouteRuleById(Long id) {        // 查询路由规则code信息        RouteRuleDTO routeRuleDTO = checkRouteRuleExist(new RouteRuleDTO().setId(id));        // 根据code删除引用的相关记录 删除用户引用信息        List<RouteMemberRuleDTO> selectMemberRules = routeMemberRuleMapper.select(new RouteMemberRuleDTO().setRouteRuleCode(routeRuleDTO.getCode()));        selectMemberRules.forEach(v -> {            if (routeMemberRuleMapper.deleteByPrimaryKey(v.getId()) != 1) {                throw new CommonException(ERROR_ROUTE_MEMBER_RULE_DELETE_EXCEPTION);            }        });        // 删除路由信息        if (routeRuleMapper.deleteByPrimaryKey(id) != 1) {            throw new CommonException("error.route.rule.delete");        }        return true;    }    @Override    @Transactional    public RouteRuleVO updateRouteRule(Long id, RouteRuleVO routeRuleVO) {        // 检查待更新路由是否存在        RouteRuleDTO routeRuleDTOSelect = checkRouteRuleExist(new RouteRuleDTO().setId(id));        // 获取更新信息 不允许更新code        routeRuleDTOSelect.setDescription(routeRuleVO.getDescription()).setObjectVersionNumber(routeRuleVO.getObjectVersionNumber());        // 更新信息 更新失败触发事务        if (routeRuleMapper.updateByPrimaryKey(routeRuleDTOSelect) != 1) {            throw new UpdateException(ERROR_ROUTE_RULE_UPDATE_EXCEPTION);        }        routeRuleVO.setId(id).setCode(routeRuleDTOSelect.getCode()).setObjectVersionNumber(routeRuleDTOSelect.getObjectVersionNumber());        // 更新配置用户信息 1. 删除已配置的用户信息        routeMemberRuleMapper.select(new RouteMemberRuleDTO().setRouteRuleCode(routeRuleVO.getCode())).forEach(v -> {            if (routeMemberRuleMapper.deleteByPrimaryKey(v.getId()) != 1) {                throw new CommonException(ERROR_ROUTE_MEMBER_RULE_DELETE_EXCEPTION);            }        });        // 2.重新添加配置用户信息        if (!ObjectUtils.isEmpty(routeRuleVO.getUserIds())) {            Arrays.stream(routeRuleVO.getUserIds()).forEach(v -> {                if (ObjectUtils.isEmpty(userMapper.selectByPrimaryKey(v))) {                    throw new CommonException(ERROR_USER_NOT_EXIST);                }                RouteMemberRuleDTO routeMemberRuleDTO = new RouteMemberRuleDTO();                routeMemberRuleDTO.setUserId(v).setRouteRuleCode(routeRuleVO.getCode());                if (routeMemberRuleMapper.insert(routeMemberRuleDTO) != 1) {                    throw new CommonException(ERROR_ROUTE_MEMBER_RULE_INSERT_EXCEPTION);                }            });        }        return routeRuleVO;    }    @Override    public Boolean checkCode(String code) {        return ObjectUtils.isEmpty(routeRuleMapper.selectOne(new RouteRuleDTO().setCode(code)));    }    @Override    public RouteRuleDTO checkRouteRuleExist(RouteRuleDTO routeRuleDTO) {        RouteRuleDTO routeRuleDTOSelect = routeRuleMapper.selectOne(routeRuleDTO);        if (ObjectUtils.isEmpty(routeRuleDTOSelect)) {            throw new CommonException("error.route.rule.not.exist");        }        return routeRuleDTOSelect;    }}